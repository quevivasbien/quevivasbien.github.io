(()=>{"use strict";class t extends Array{constructor(...t){super(...t)}sum(){let t=0;for(let e=0;e<this.length;e++)t+=this[e];return t}prod(){let t=1;for(let e=0;e<this.length;e++)t*=this[e];return t}plus(e){let n=new t;for(let t=0;t<this.length;t++)n.push(this[t]+e[t]);return n}scalarPlus(e){let n=new t;for(let t=0;t<this.length;t++)n.push(this[t]+e);return n}sub(e){let n=new t;for(let t=0;t<this.length;t++)n.push(this[t]-e[t]);return n}times(e){let n=new t;for(let t=0;t<this.length;t++)n.push(this[t]*e[t]);return n}scalarTimes(e){let n=new t;for(let t=0;t<this.length;t++)n.push(this[t]*e);return n}div(e){let n=new t;for(let t=0;t<this.length;t++)n.push(this[t]/e[t]);return n}scalarDiv(e){let n=new t;for(let t=0;t<this.length;t++)n.push(this[t]/e);return n}pow(e){let n=new t;for(let t=0;t<this.length;t++)n.push(Math.pow(this[t],e[t]));return n}pretty(t=2){return`[${this.map((e=>e.toFixed(t))).join(", ")}]`}}function e(e){return new t(...e)}class n{constructor({a:e=new t(1,1),alpha:n=new t(1,1),b:r=new t(1,1),beta:s=new t(1,1),theta:o=new t(1,1)}={}){if(this.n=e.length,n.length!=this.n||r.length!=this.n||s.length!=this.n||o.length!=this.n)throw Error("Parameters to ProdFunc constructor must have equal length (=n)");this.a=e,this.alpha=n,this.b=r,this.beta=s,this.theta=o}f(t,e){const n=this.b.times(e.pow(this.beta));return[this.a.times(t.pow(this.alpha)).div(n.pow(this.theta)),n]}}function r(t){return t.div(t.scalarPlus(1)).prod()}class s{constructor({d:e=new t(0,0),r=new t(.01,.01),prodFunc:s=new n}={}){if(this.n=s.n,e.length!=this.n||r.length!=this.n)throw Error("Parameters to Problem constructor must have equal length (=n)");this.d=e,this.r=r,this.prodFunc=s}payoff(t,e,n){const[s,o]=this.prodFunc.f(e,n),i=r(s);return i*function(t,e){return e[t]/e.sum()}(t,o)-(1-i)*this.d[t]-this.r[t]*(e[t]+n[t])}payoffs(t,e){const[n,s]=this.prodFunc.f(t,e),o=r(n);return function(t){return t.scalarDiv(t.sum())}(s).plus(this.d).scalarTimes(o).sub(this.d).sub(this.r.times(t.plus(e)))}}class o{constructor(t,e,n,r){this.x=t,this.fx=e,this.iters=n,this.success=r}}function i(t,e){let n=new Array;for(let r=0;r<e.length;r++)n.push(t(e[r]));let r=Array.from(e.keys());r.sort(((t,e)=>n[t]-n[e]));let s=new Array,o=new Array;for(let t=0;t<e.length;t++)s.push(e[r[t]]),o.push(n[r[t]]);return[s,o]}function l(t,e){let n=new Array;for(let r=0;r<e;r++){let s=0;for(let n=0;n<e;n++)s+=t[n][r];n.push(s/e)}return n}function u(t,e){return function(t){const e=t.length;let n=0,r=0;for(let s=0;s<e;s++)n+=Math.pow(t[s],2),r+=t[s];return n/(e-1)-Math.pow(r,2)/(e*(e-1))}(t)<e}function h(t,e,n,r){let s=new Array;for(let o=0;o<n;o++)s.push(e[o]+r*(e[o]-t[n][o]));return s}function a(t,e,n,r){let s=new Array;for(let o=0;o<n;o++)s.push(t[o]+r*(e[o]-t[o]));return s}function c(t,e,n,r){let s=new Array;for(let o=0;o<n;o++)s.push(t[o]+r*(e[o]-t[o]));return s}function f(t,e,n){const r=t[0];for(let s=1;s<e+1;s++)for(let o=0;o<e;o++)t[s][o]=r[o]+n*(t[s][o]-r[o]);return t}function p(t,e,{maxIterations:n=100,tolerance:r=1e-6,initSimplexSize:s=1,alpha:p=1,gamma:d=2,rho:m=.5,sigma:g=.5}={}){const w=e.length;let y,x=function(t,e,n){let r=new Array;r.push(t);for(let s=0;s<e;s++){let e=[...t];e[s]+=n,r.push(e)}return r}(e,w,s);for(let e=0;e<n;e++){if([x,y]=i(t,x),u(y,r))return new o(x[0],y[0],e,!0);const n=l(x,w),s=h(x,n,w,p),M=t(s);if(M>=y[0]&&M<y[w-1]){x[w]=s;continue}if(M<y[0]){const e=a(n,s,w,d);t(e)<M?x[w]=e:x[w]=s;continue}let v;if(M<y[w]){if(v=c(n,s,w,m),t(v)<M){x[w]=v;continue}}else if(v=c(n,x[w],w,m),t(v)<y[w]){x[w]=v;continue}x=f(x,w,g)}return console.log("Warning, did not converge in specified number of iterations"),new o(x[0],t(x[0]),n,!1)}class d{constructor(t,e,n,s){this.success=e,this.xs=n,this.xp=s,[this.s,this.p]=t.prodFunc.f(n,s),this.total_safety=r(this.s),this.payoffs=t.payoffs(n,s)}}function m(){let t=0,e=0;for(;0===t;)t=Math.random();for(;0===e;)e=Math.random();return Math.sqrt(-2*Math.log(t))*Math.cos(2*Math.PI*e)}function g(e,n=0,r=1){const s=new t;for(let t=0;t<e;t++)s.push(Math.exp(n+r*m()));return s}function w(n,r,s,o,i,l){let u=new t,h=new t;for(let t=0;t<n.n;t++){let a=e(r),c=e(s);const f=p((e=>(a[t]=Math.exp(e[0]),c[t]=Math.exp(e[1]),-n.payoff(t,a,c))),[Math.log(r[t]),Math.log(s[t])],{tolerance:o,maxIterations:i,initSimplexSize:l});u.push(Math.exp(f.x[0])),h.push(Math.exp(f.x[1]))}return[u,h]}function y(t,e,n,r=1e-8){if(t.length!==e.length)return!1;for(let s=0;s<t.length;s++)if(Math.abs((t[s]-e[s])/(e[s]+r))>n)return!1;return!0}function x(t,{tol:e=1e-6,maxIters:n=100,solverTol:r=1e-10,solverMaxIters:s=100,solverSimplexSize:o=100,retries:i=10}={}){let l=g(t.n),u=g(t.n);for(let i=0;i<n;i++){const[n,i]=w(t,l,u,r,s,o);if(y(n,l,e))return new d(t,!0,n,i);l=n,u=i}return i>0?(console.log("retrying..."),x(t,{tol:e,maxIters:n,solverTol:r,solverMaxIters:s,solverSimplexSize:o,retries:i-1})):(console.log("no retries remaining"),new d(t,!1,l,u))}const M={a:new t(0,0),alpha:new t(0,0),b:new t(0,0),beta:new t(0,0),theta:new t(0,0),d:new t(0,0),r:new t(0,0)};function v(t){const e=[document.getElementById(`${t}1`),document.getElementById(`${t}2`)],n=document.getElementById(`${t}-sync`);function r(){e[1].hidden=n.checked,e[1].value=e[0].value}n.checked=!0,r(),n.addEventListener("click",r);const s=document.getElementById(`${t}-display`);function o(r){n.checked&&(e[1-r].value=e[r].value),M[t][0]=parseFloat(e[0].value),M[t][1]=parseFloat(e[1].value),s.innerHTML=M[t].pretty()}o(0),e[0].addEventListener("input",(()=>o(0))),e[1].addEventListener("input",(()=>o(1)))}document.getElementById("button").addEventListener("click",(function(){const t=new n({a:M.a,alpha:M.alpha,b:M.b,beta:M.beta,theta:M.theta}),e=x(new s({prodFunc:t,d:M.d,r:M.r}));console.log("solver success: ",e.success),document.getElementById("solution-xs").innerHTML=e.xs.pretty(),document.getElementById("solution-xp").innerHTML=e.xp.pretty(),document.getElementById("solution-s").innerHTML=e.s.pretty(),document.getElementById("solution-p").innerHTML=e.p.pretty(),document.getElementById("solution-total-safety").innerHTML=`${(100*e.total_safety).toFixed(1)}%`,document.getElementById("solution-payoffs").innerHTML=e.payoffs.pretty()})),function(){for(let t in M)v(t)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,